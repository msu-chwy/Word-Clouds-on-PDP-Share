create or replace local temp table ecom_sandbox.sfw_exp_pop on commit preserve rows as	
with testing as (	
select	
    * from (	
    select ga.*, start_date, end_date,	
    personalized_hit_id as exp_user_id, --only using the PID and not the Anon_PID	
    dense_rank() over(	
        partition by personalized_hit_id, 
        unique_visit_id,
        event_action,	
        event_label	
        order by	
            hit_timestamp	
    ) as act_rank	
from	
    ga.ga_sessions_hits ga	
    inner join ecom_sandbox.pca_sfw_experiments as exp	
        on ga.event_action = exp.test	
        and exp.start_date <= ga_sessions_date 	
        and (exp.end_date >= ga_sessions_date or exp.end_date is null)	
where	
    ga_sessions_date >= '2022-11-02' AND ga_sessions_date <= '2022-12-05'	
    and load_type = 'daily'	
    and is_bot = false	
    and dataset = 'web'	
  --and event_value = 1	
    and event_category = 'optimizely' 	
    and not rlike (event_label, '[0-9\. \-]+[0-9a-zA-Z\/ ]+')	
    and event_action = '2022_10_SFW_PDP_WORD_CLOUDS'	
    -- and event_action in ('2022_03_AS_ADD_MORE_ITEM', '2022_01_AS_SKIP_ITEM')	
    and event_label not in ('6 Doses (6-mos. supply)', 'view-all-click', 'null', 'Beef')	
    -- and (not is_completed or (is_completed and end_date = (select max(ga_sessions_date) as data_date from ga.ga_sessions where ga_sessions_date >= '2022-1-1' and load_type = 'daily')))	
) as ranked	
where	
act_rank = 1),


-- identify the population that got activated into more than 1 treatment/control groups
-- scenario 1 - same session two variations seen
same_session_spillover as (	
select distinct personalized_hit_id as exp_user_id from ga.ga_sessions_hits	
where unique_visit_id in (	
select unique_visit_id from ga.ga_sessions_hits	
where ga_sessions_date between '2022-11-02' and '2022-12-05'	
    and is_bot = false	
    and dataset = 'web'	
    and event_category = 'optimizely'	
    and event_action = '2022_10_SFW_PDP_WORD_CLOUDS'	
group by unique_visit_id	
having count(distinct event_label) > 1) 	
and ga_sessions_date between '2022-11-02' and '2022-12-05'	
    and is_bot = false	
    and dataset = 'web'	
    and event_category = 'optimizely'	
    and event_action = '2022_10_SFW_PDP_WORD_CLOUDS'	
),	

-- scenario 2 - same customer ID two variations seen (could be in one session or across sessions)
multiple_session_spillover as (	
select distinct personalized_hit_id as exp_user_id from ga.ga_sessions_hits	
where customer_id in (	
select customer_id from ga.ga_sessions_hits	
where ga_sessions_date between '2022-11-02' and '2022-12-05'		
    and is_bot = false	
    and dataset = 'web'	
    and event_category = 'optimizely'	
    and event_action = '2022_10_SFW_PDP_WORD_CLOUDS'	
group by customer_id	
having count(distinct event_label) > 1)	
and ga_sessions_date between '2022-11-02' and '2022-12-05'		
    and is_bot = false	
    and dataset = 'web'	
    and event_category = 'optimizely'	
    and event_action = '2022_10_SFW_PDP_WORD_CLOUDS'	
),


pdp_entrance as (
select distinct unique_visit_id, page_path from ga.ga_sessions_hits
where ga_sessions_date between '2022-11-02' and '2022-12-05' and not is_bot and dataset = 'web' and hit_custom_attributes:page_type = 'pdp' and is_entrance
)


select 
    testing.ga_sessions_date, 
    testing.event_action as Test, 
    testing.event_label as Variation, 
    testing.unique_visit_id, 
    testing.exp_user_id, --The PID only, not that this is a server side exp. and Anon PID is not used
    testing.page_path,
case when pdp_entrance.page_path is not null then 1 else 0 end as direct_entrance_flag,
min(testing.hit_number) as activation_hit_number,  min(testing.hit_timestamp) as activation_time, lead(min(testing.hit_number), 1)over(partition by testing.unique_visit_id order by min(testing.hit_timestamp)) as next_activation, min(testing.start_date) as start_date, max(testing.end_date) as end_date
from testing 
left join same_session_spillover as s_spillover
on testing.exp_user_id = s_spillover.exp_user_id
left join multiple_session_spillover as m_spillover
on testing.exp_user_id = m_spillover.exp_user_id
left join pdp_entrance
on testing.unique_visit_id = pdp_entrance.unique_visit_id and testing.page_path = pdp_entrance.page_path
where s_spillover.exp_user_id is null and m_spillover.exp_user_id is null
group by 1,2,3,4,5,6,7;

create or replace temp table ecom_sandbox.tmp_sfw_exp_sessions_ensemble_product as
select distinct
  h.unique_visit_id,
  h.hit_number,
  h.unique_hit_id,
  h.device_category,
  h.channel_grouping channel,
  h.active_autoship_flag,
  h.ga_sessions_date,
  h.visit_start_time,
  h.hit_timestamp,
  h.hit_custom_attributes:page_type as page_type,
  h.totals:bounces as bounces,
  h.is_entrance,
  n.exp_user_id,
  n.Test,
  n.Variation,
  direct_entrance_flag,
  h.transaction_id,
  nvl(h.transaction_revenue, 0) as transaction_revenue,
  h.event_label,
  h.event_action,
  h.event_category,
  h.ecommerce_action_type,
  h.new_customer_flag,
  h.page_path as Page,
  page_path_level3,
  h.product_id,
  h.product_part_number,
  h.PARENT_PRODUCT_PART_NUMBER,
  h.PRODUCT_MERCH_CLASSIFICATION1,
  h.PRODUCT_MERCH_CLASSIFICATION2,
  h.product_price,
  h.product_quantity,
  h.product_revenue,
  h.promo_position_0,
  h.promo_creative_0,
  e.PRODUCTPARTNUMBER as part_number,
  e.ENSEMBLEID as id,
  e.ENSEMBLENAME as ENSEMBLE_NAME,
  CAST(LATENCY_TRACKING:domInteractiveTime as int) as Document_Interactive_Time_Raw
from
  (     select *
        from ga.ga_sessions_hits_products_union 
        where ga_sessions_date >= '2022-11-02' AND ga_sessions_date <= '2022-12-05'
        and dataset='web' 
        and is_bot = false 
        and load_type = 'daily'
                                ) h
inner join ecom_sandbox.sfw_exp_pop n on n.unique_visit_id = h.unique_visit_id 
                                        and timediff(millisecond, h.hit_timestamp, activation_time) <= 1000 
                                        and n.start_date <= h.ga_sessions_date 
                                        and (n.end_date >= h.ga_sessions_date or n.end_date is null)
left join ecom_sandbox.tmp_product_ensemble_table e on h.PARENT_PRODUCT_PART_NUMBER = e.PRODUCTPARTNUMBER; 

----------------------------------Analysis at Merch Class Level----------------------------------------------------------------------------------
create or replace table ecom_sandbox.tmp_sfw_exp_sessions_mc1 as
select 
test,
variation,
PRODUCT_MERCH_CLASSIFICATION1,
  sum(case when event_action='purchase' and event_category='eec' and transaction_id is not null then h.transaction_revenue else 0 end) as transaction_revenue,
  COUNT(DISTINCT h.unique_visit_id) AS Total_Sessions,
  COUNT(DISTINCT exp_user_id) AS Total_Users,
  count(distinct case when (event_category = 'eec' AND event_action = 'detail' AND event_label in ('In Stock','Out of Stock') and ecommerce_action_type = '2')  then h.unique_visit_id end) as PDP_Sessions,
  count(distinct case when (event_category ='eec' AND event_action = 'addToCart') then h.unique_visit_id end) as ATC_Sessions,
  count(distinct case when (event_category ='eec' AND event_action = 'addToCart') then h.unique_hit_id end) as All_ATCs,
  count(distinct case when (event_category ='eec' AND event_action = 'addToCart' and event_label='pdp') then h.unique_hit_id end) as PDP_ATCs,
  count(distinct case when (event_category ='eec' AND event_action = 'addToCart' and event_label='pdp') then h.unique_visit_id end) as PDP_ATC_sessions,
  count(distinct case when event_action='purchase' and event_category='eec' and transaction_id is not null then h.unique_visit_id end) as Purchase_Sessions,
  count(distinct case when h.event_action = 'purchase' and h.transaction_id is not null then h.transaction_id end) as Orders,
  count(distinct case when event_action='purchase' and event_category='eec' and transaction_id is not null then h.exp_user_id end) as User_Purchase,
  COUNT(DISTINCT CASE WHEN event_action = 'addToAutoship' THEN h.unique_visit_id END) AS ATA_Sessions,
  COUNT(distinct case when (event_category = 'pdp-reviews' AND event_action = 'impression' AND event_label='Word-cloud') then h.unique_hit_id end) as Word_Cloud_Impression,
  COUNT(distinct case when (event_category = 'pdp-reviews' AND event_action = 'click' AND event_label='Word_cloud_chip') then h.unique_hit_id end) as Word_Cloud_Click
from ecom_sandbox.tmp_sfw_exp_sessions_ensemble_product h
group by 1,2,3;

SELECT * FROM ecom_sandbox.tmp_sfw_exp_sessions_mc1;

create or replace table ecom_sandbox.tmp_sfw_exp_sessions_mc2 as
select 
test,
variation,
PRODUCT_MERCH_CLASSIFICATION1,
PRODUCT_MERCH_CLASSIFICATION2,
  sum(case when event_action='purchase' and event_category='eec' and transaction_id is not null then h.transaction_revenue else 0 end) as transaction_revenue,
  COUNT(DISTINCT h.unique_visit_id) AS Total_Sessions,
  COUNT(DISTINCT exp_user_id) AS Total_Users,
  count(distinct case when (event_category = 'eec' AND event_action = 'detail' AND event_label in ('In Stock','Out of Stock') and ecommerce_action_type = '2')  then h.unique_visit_id end) as PDP_Sessions,
  count(distinct case when (event_category ='eec' AND event_action = 'addToCart') then h.unique_visit_id end) as ATC_Sessions,
  count(distinct case when (event_category ='eec' AND event_action = 'addToCart') then h.unique_hit_id end) as All_ATCs,
  count(distinct case when (event_category ='eec' AND event_action = 'addToCart' and event_label='pdp') then h.unique_hit_id end) as PDP_ATCs,
  count(distinct case when (event_category ='eec' AND event_action = 'addToCart' and event_label='pdp') then h.unique_visit_id end) as PDP_ATC_sessions,
  count(distinct case when event_action='purchase' and event_category='eec' and transaction_id is not null then h.unique_visit_id end) as Purchase_Sessions,
  count(distinct case when h.event_action = 'purchase' and h.transaction_id is not null then h.transaction_id end) as Orders,
  count(distinct case when event_action='purchase' and event_category='eec' and transaction_id is not null then h.exp_user_id end) as User_Purchase,
  COUNT(DISTINCT CASE WHEN event_action = 'addToAutoship' THEN h.unique_visit_id END) AS ATA_Sessions,
  COUNT(distinct case when (event_category = 'pdp-reviews' AND event_action = 'impression' AND event_label='Word-cloud') then h.unique_hit_id end) as Word_Cloud_Impression,
  COUNT(distinct case when (event_category = 'pdp-reviews' AND event_action = 'click' AND event_label='Word_cloud_chip') then h.unique_hit_id end) as Word_Cloud_Click
from ecom_sandbox.tmp_sfw_exp_sessions_ensemble_product h
group by 1,2,3,4;

SELECT * FROM ecom_sandbox.tmp_sfw_exp_sessions_mc2;

-- Click Distribution by Word Clouds String (MC1)

create or replace local temp table ecom_sandbox.sfw_exp_CT1 on commit preserve rows as
SELECT Test,
        PRODUCT_MERCH_CLASSIFICATION1,
       promo_creative_0,
       COUNT(distinct case when (event_category = 'pdp-reviews' AND event_action = 'click' AND event_label='Word_cloud_chip') then unique_hit_id end) as Word_Cloud_Click
from ecom_sandbox.tmp_sfw_exp_sessions_ensemble_product
WHERE variation='TREATMENT'
group by 1,2,3;
  
SELECT * FROM ecom_sandbox.sfw_exp_CT1
ORDER BY Word_Cloud_Click DESC
LIMIT 50;

-- Click Distribution by Word Clouds String (MC2)

create or replace local temp table ecom_sandbox.sfw_exp_CT2 on commit preserve rows as
SELECT Test,
       PRODUCT_MERCH_CLASSIFICATION1,
       PRODUCT_MERCH_CLASSIFICATION2,
       promo_creative_0,
       COUNT(distinct case when (event_category = 'pdp-reviews' AND event_action = 'click' AND event_label='Word_cloud_chip') then unique_hit_id end) as Word_Cloud_Click
from ecom_sandbox.tmp_sfw_exp_sessions_ensemble_product
WHERE variation='TREATMENT'
group by 1,2,3,4;
  
SELECT * FROM ecom_sandbox.sfw_exp_CT2
ORDER BY Word_Cloud_Click DESC
LIMIT 50;

-- Click Distribution by Word Clouds Positions (MC1)

create or replace local temp table ecom_sandbox.sfw_exp_CT3 on commit preserve rows as
SELECT DISTINCT promo_position_0,PRODUCT_MERCH_CLASSIFICATION1,
       COUNT(distinct case when (event_category = 'pdp-reviews' AND event_action = 'click' AND event_label='Word_cloud_chip') then unique_hit_id end) as Word_Cloud_Click
from ecom_sandbox.tmp_sfw_exp_sessions_ensemble_product
GROUP BY 1,2;
  
SELECT * FROM ecom_sandbox.sfw_exp_CT3 ORDER BY Word_Cloud_Click DESC;

-- Click Distribution by Word Clouds Positions (MC2)

create or replace local temp table ecom_sandbox.sfw_exp_CT4 on commit preserve rows as
SELECT DISTINCT promo_position_0,PRODUCT_MERCH_CLASSIFICATION1,PRODUCT_MERCH_CLASSIFICATION2,
       COUNT(distinct case when (event_category = 'pdp-reviews' AND event_action = 'click' AND event_label='Word_cloud_chip') then unique_hit_id end) as Word_Cloud_Click
from ecom_sandbox.tmp_sfw_exp_sessions_ensemble_product
GROUP BY 1,2,3;
  
SELECT * FROM ecom_sandbox.sfw_exp_CT4 ORDER BY Word_Cloud_Click DESC;
